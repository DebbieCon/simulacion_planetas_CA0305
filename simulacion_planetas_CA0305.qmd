---
lang: es
format:
  pdf:
    tbl-cap-location: bottom
    fig-cap-location: bottom
    citations-hover: true
    footnotes-hover: true
    indent: true
    fig-align: center
crossref:
  tbl-title: "Tabla"
  tbl-prefix: "Tabla"
  fig-title: "Figura"
  fig-prefix: "Figura"
bibliography: references.bib
csl: apa.csl
cite-method: citeproc
---

```{=tex}
\begin{center}
    {\Large\textbf{El problema de los 2 cuerpos y el caos en sistemas de 3 o más cuerpos}}\par 
    \vspace{0.15cm}
 \large{Proyecto del curso CA0305 - Herramientas de Ciencia de Datos II}
 \\ \vspace{0.3cm}
 
    \normalsize
    \raggedleft
    Jose Andrey Prado Rojas C36174$^{*1}$, Debbie Con Ortega C32250$^{*2}$, Jesús Aarón Retana Castro C26400$^{*3}$ \par 
    \vspace{0.15cm}
    \centering
    
    \textit{$^*$Estudiantes de Ciencias Actuariales Pura, Escuela de Matemática, Universidad de Costa Rica. San José, Costa Rica. Junio, 2025}\par 
    \vspace{0.15cm}
    \raggedright
    
    \textit{$^1$\href{joseandrey.prado@ucr.ac.cr}{joseandrey.prado@ucr.ac.cr}, $^2$\href{debbie.con@ucr.ac.cr}{debbie.con@ucr.ac.cr}, $^3$\href{jesus.retana@ucr.ac.cr}{jesus.retana@ucr.ac.cr}}
    \noindent
    \rule{\linewidth}{0.5mm}
\end{center}
```
# Introducción

El movimiento de los cuerpos celestes ha despertado un profundo interés durante siglos, tanto para la comunidad física como matemática. De hecho, ha sido impulsor de revoluciones científicas y filosóficas a lo largo de la historia. En sus inicios, los grandes pensadores centraban sus ideas en el movimiento de los cuerpos del sistema solar.

A lo largo del tiempo la discusión sobre el movimiento de los cuerpos celestes ha persistido, dando lugar a una variedad de teorías que en ocasiones se han mezclado y coexistido entre ellas. Desde la Teoría Geocéntrica formulada por Aristóteles y desarrollada por Ptolomeo, hasta la Teoría Heliocéntrica propuesta por Nicolás Copérnico en el siglo XVI y posteriormente confirmada por Galileo Galilei. Finalmente, la comunidad científica acepta el modelo Kepleriano que agrupa el heliocentrismo, las leyes de Kepler y las leyes de la mecánica establecidas por Newton [@Ponce2010].

El problema de los dos cuerpos; es decir, el movimiento de dos masas que interactúan por la aceleración gravitacional puede ser descrita como una función de tiempo y es analíticamente soluble. Gracias a la mecánica clásica Newtoniana es posible describir el movimiento del sistema como una ecuación diferencial por tanto el problema se reduce a calcular las funciones que satisfacen estas ecuaciones [@Guzman2025].

Este problema es de gran importancia en astronomía, mecánica orbital, dinámica galáctica, formación estelar, así como en la determinación de trayectorias óptimas para misiones de naves espaciales [@perezagua2022trescuerpos].

Sin embargo, un sistema mayor a dos cuerpos no es analíticamente soluble por tanto no existe una solución explícita del sistema de ecuaciones. En el presente trabajo, se simulará la trayectoria tanto de dos cuerpos como de múltiples. Mediante la aproximación con el método de Runge Kutta y el uso de redes neuronales físicamente informadas. 
\newpage

# Exploración

El ser humano desde el inicio de los tiempos ha presentado cierta fascinación con el espacio. Desde las más antiguas civilizaciones el ser humano ha dedicado tiempo y esfuerzo en entender el movimiento de los cuerpos celestes desde una perspectiva filosófica, espiritual y científica. Primeramente, el interés de estas civilizaciones giraba en torno a las estrellas, lo que probó ser fundamental con el advenimiento de la navegación [@Ponce2010].

Uno de los mayores quiebres en la teoría se produjo por Ptolomeo en el siglo II d.C, quien propuso que la Tierra ocupaba el centro del universo y los demás cuerpos giraban en órbitas alrededor de ella es decir, un modelo geocéntrico. Claramente, apoyándose con la teoría de Aristóteles; Teoría del geocentrismo. A pesar de no asemejarse a la realidad que conocemos probó ser bastante preciso en sus cálculos a la hora de predecir fenómenos astronómicos [@cortes2021aproximacion].

Luego en el siglo XVI, Nicolás Copérnico plantea el Sol como el centro del universo, donde la tierra y demás cuerpos giraban alrededor de él; conocido como la teoría del heliocentrismo. La cual fue luego validada por Galileo usando el recién inventado telescopio [@Ponce2010]. A Galileo se le atribuye como el primero en utilizar el telescopio para el estudio sistemático de los cielos. Asimismo, se le considera “el padre de la ciencia” ya que sus descubrimientos contribuyeron a ponerle fin a la ciega lealtad a la autoridad tanto eclesiástica como a otros pensadores entre ellos Aristóteles, en materia de ciencia. Además, de promulgar la separación de la ciencia, religión y filosofía [@csic_galileo].

Posteriormente, Johannes Kepler (1571-1630) postula las leyes de Kepler, conocidas como la Ley de las Órbitas, la Ley de las Áreas y la Ley de los Periodos. A partir de estas, Newton llega a ciertas conclusiones importantes. Una de ellas es que los planetas y los satélites no están en equilibrio; hay una fuerza neta que actúa sobre ellos ya que se mueven en órbitas (1era Ley del Movimiento). La segunda es que todos los cuerpos se atraen unos a otros mediante la fuerza gravitatoria, por lo tanto las fuerzas centrales sobre los planetas en el Sistema Solar es la atracción de la fuerza gravitatoria del Sol [@ibero2025kepler].

Una vez que son postuladas y aceptadas las leyes de la mecánica desarrolladas por Newton en 1687, a las cuales también se les conoce como Leyes de Newton, la comunidad científica aprueba la Teoría Heliocéntrica y las las Leyes de Kepler. El modelo resultante de aplicar las leyes de Newton a un sistema con características similares al nuestro es lo que se conoce como el modelo Kepleriano [@Ponce2010].

La mecánica clásica newtoniana permite describir el movimiento de los objetos mediante ecuaciones diferenciales. Estas ecuaciones basadas en las Leyes de Newton expresan cómo cambian las variables físicas como posición y velocidad en función del tiempo. Al resolver el sistema, se obtiene la trayectoria del mismo en cualquier instante. Por lo tanto, el comportamiento del sistema se reduce en calcular las funciones que satisfacen las ecuaciones. Ahora bien, encontrar las funciones mencionadas es sumamente complejo, inclusive para modelos simples. Los intentos de encontrar estas funciones se agrupan bajo el nombre del problema de los n cuerpos [@Ponce2010].

Al tratarse de dos cuerpos, sí es posible encontrar una solución al sistema donde se implementa a su vez la fórmula de la fuerza gravitacional para lograrlo. Sin embargo, para un sistema de tres o más cuerpos esto no es posible por tanto no es “analíticamente soluble” [@Guzman2025]. La conclusión de que no es posible encontrar un función en el caso de tres cuerpos fue desarrollada por Henri Poincaré. Él determinó que en casos como el anterior la evolución del sistema es extremadamente caótica. Ya que, una pequeña perturbación en el estado inicial podría llevar eventualmente a un estado totalmente diferente. Por lo tanto, es imposible predecir el estado del sistema dado que los instrumentos de medición ni siquiera pueden detectar esa mínima variación [@pardo2022mecanica].

Poincaré más bien propone un estudio más cualitativo de las órbitas cuando se trata de esta cantidad o mayor cantidad de masas. Es así, que se establece una nueva área en la matemática; sistemas dinámicos [@Ponce2010]. Asimismo, es posible implementar lo que se conoce como redes neuronales para tratar de predecir las órbitas de los cuerpos. Estas se proponen como un modelo artificial del cerebro humano, cuyo propósito es simular ciertas características como la capacidad de memorizar y asociar hechos. Hay ciertos problemas cuya respuesta no es tan simple como un algoritmo, sino que dependen de la experiencia. Las redes neuronales buscan llenar ese vacío, mediante un sistema de tratamiento de la información basado en la experiencia acumulada (Matich, 2001).

Este modelo de computación prueba ser adecuado para el reconocimiento de patrones con el fin de identificar y clasificar objetos. En este caso, se utiliza para aproximar basado en las velocidades y posiciones de los planetas del sistema solar, las órbitas de tanto estos como otros cuerpos celestes. Estructuralmente, cuenta con una serie de nodos conectados donde se descomponen primeramente las entradas y cuyo comportamiento depende de la forma en que se realizan las conexiones de estos elementos individuales y la importancia de cada conexión. Dichos nodos conforman lo que se conoce como capas los cuales están interconectados tal que cada capa utiliza la salida de la capa anterior como entrada. La estructura más simple consta de una capa de entrada, una capa de oculta y una capa de salida. Sin embargo, las capas ocultas frecuentan ser muchas más (mathworks). 

Para entrenar a dichas redes se utilizan técnicas de machine learning entre las que destacan: el aprendizaje supervisado y no supervisado, cuya diferencia radica en si el conjunto de datos se encuentran etiquetados o no, la clasificación quien se entrena para reconocer ciertas categorías, la regresión, el reconocimiento de patrones y el clustering. El uso de estas técnicas depende del problema a abordar, la precisión de los resultados está sujeta a que tanto se adecua esta técnicas a la tarea en mano (mathworks).

Asimismo, a partir del concepto de redes neuronales se desarrolla lo que se conoce como redes neuronales informadas por la física o PINN por sus siglas en inglés, estas redes funcionan como las tradicionales sin embargo son capaces de incorporar leyes de la física. Estos se han llegado inclusive a ser considerados como métodos numéricos ya que primordialmente son empleados en la resolución de problemas con ecuaciones en derivadas parciales especialmente las que su resolución puede llegar a ser altamente compleja mediante métodos numéricos estándar (jose maria). Por lo tanto, es ideal ante el problema de los n cuerpos, ya que su formación está basada en estas ecuaciones y su incapacidad de encontrar la solución de las mismas.

Las PINN comúnmente cuentan con una estructura de tres grandes bloques. Primeramente, una red neuronal artificial el cual recibe un vector de variables y devuelve el valor de la solución predicha. Luego, se establece un “módulo físicamente informado” el cual calcula las derivadas de la salida de la red respecto a sus entradas e introduce las leyes físicas donde determina que tan bien se cumplen estas leyes a los puntos anteriores. Finalmente, cuenta con un mecanismo de retroalimentación que define el problema de minimización. Es decir, considera el error de los datos observados y el error al incluir las ecuaciones físicas como método de ajuste a los parámetros de la red, para posteriormente mejorar su predicción.  




# Desarrollo

Basado en lo expuesto en la introducción y la exploración, es pertinente plantear una metodología que permita darle una respuesta satisfactoria al problema planteado. En este caso, se pretende lograr tres objetivos principales: simulación, visualización y predicción. Como se explicó en la sección anterior, el problema de los dos cuerpos puede ser resuelto por completo de forma analítica, pero esto requeriría darle un enfoque al trabajo que no solo excede los alcances del curso, sino que se desvía de los aprendizajes esperados. 

El primer aspecto que se quiere cubrir dentro de la implementación es la simulación. Como punto de partida, debe crearse una clase “Cuerpo”, que pueda representar un planeta, una estrella o cualquier otro objeto astronómico significativo, por lo que sus atributos deben necesariamente incluir su posición inicial (en tres dimensiones), su velocidad y su masa. A partir de esta primera clase madre, se puede desarrollar otra clase que se encargue de la simulación propiamente, para lo cual debería tener como atributo la lista de cuerpos (creados con la clase anterior) que van a interactuar y el tiempo que va a transcurrir en la simulación. 

Ahora, para obtener los valores de posición y velocidad de los cuerpos a través del tiempo, se propone utilizar el Método de Runge-Kutta de cuarto orden (RK4), un método iterativo para la aproximación de soluciones a ecuaciones diferenciales. Este es relevante porque en el problema de los n-cuerpos, la posición y velocidad de cada cuerpo cambian con el tiempo por las influencia de las fuerza gravitacionales de los demás, lo cual puede describirse mediante ecuaciones diferenciales. No solo ofrece soluciones para cada intervalo de tiempo establecido, sino que además utiliza un promedio ponderado de cuatro estimaciones de la pendiente de la solución para mejorar la precisión. Por lo tanto, es indispensable que la clase “Simulación” incorpore un método capaz de ejecutar el RK4 considerando varios cuerpos, para lo cual también es necesario un método auxiliar que calcule las aceleraciones y otro que actualice las posiciones de los cuerpos tras cada estimación. 

Como segundo objetivo, se espera incluir una funcionalidad de animación dentro del código. Hasta el momento, los módulos anteriores solo muestran resultados numéricos o almacenan las operaciones internamente, pero para representar más intuitivamente su comportamiento se considera oportuno agregar módulos con la capacidad de mostrar gráficamente las trayectorias de los cuerpos en dos y tres dimensiones. Para esto, se incluirá una clase “Simulación2D” que herede de “Simulación”, la cual obtendrá los datos de las posiciones en el tiempo para dibujar las trayectorias con el uso de paquetes de graficación y animación como matplotlib.pyplot y matplotlib.animation. El principal método tendrá que definir de manera dinámica el rango de los ejes para garantizar la correcta visualización de todos los cuerpos, crear puntos que representan los cuerpos, líneas para trazar las trayectorias y actualizar periódicamente el gráfico mostrado para cubrir la órbita completa (o al menos en el periodo que se defina). De forma similar para la visualización en tres dimensiones, se construirá una clase “Simulación3D” con un funcionamiento análogo a su contraparte bidimensional, solo que con una coordenada adicional.

Finalmente, el otro punto que se busca incorporar es la predicción de órbitas, posiblemente la parte más ambiciosa de esta propuesta. Como se mencionaba en la exploración, debido a su complejidad y especialmente a su dependencia del tiempo, el intentar predecir la órbita de un cuerpo con un algoritmo “estático” que no modifica sus operaciones aunque cambien las propiedades de sus parámetros, puede resultar insuficiente. Por esta razón es que se propone el uso de una red neuronal informada por la física, que pueda ser entrenada con datos reales disponibles sobre las órbitas de los ocho planetas del Sistema Solar. La idea central es combinar datos astronómicos (posiciones y tiempos) con las leyes fundamentales del movimiento, de modo que el modelo no solo aprenda de los datos, sino que también respete, en lo posible, la ley de gravitación universal. Esto permitirá generar predicciones más robustas y físicamente factibles. 

El módulo ModeloPINN permitirá cargar datos astronómicos desde archivos (como CSV) que contengan: fechas u otros tiempos de referencia, posiciones espaciales (x, y, z) de cada cuerpo relevante y posiciones del objeto a modelar. Luego, se encargará de normalizar escalas temporales y espaciales, transformar los datos en un formato que pueda usar la red neuronal y permitir seleccionar qué cuerpos se considerarán como fuentes gravitacionales. Para definir la red, se tomará como entrada un tiempo (o conjunto de tiempos) y las posiciones de los planetas en ese instante, para más adelante predecir la posición del objeto. La arquitectura de la red deberá ser configurable en cuanto a número de capas y neuronas, pero también se puede definir una configuración por defecto razonable. 

Además de ajustarse a los datos, el modelo también debe cumplir una formulación aproximada de la segunda ley de Newton bajo gravitación. Para esto, se calcula la aceleración que debería tener el objeto según la ley de Newton y se calcula la aceleración implícita en las predicciones del modelo (derivando dos veces la posición predicha respecto al tiempo). La diferencia entre ambas se considera un “residuo físico” que se minimiza durante el entrenamiento. 

Con este enfoque, el módulo entrena la red neuronal en dos fases: primero sin física (ajuste puro a los datos), para tener un punto de partida razonable, y luego con física, minimizando tanto el error de predicción como el residuo físico. Para esto es necesario dividir los datos entre aquellos que se usarán para entrenamiento y los que serán para validación. Una vez entrenado, el modelo tiene la capacidad de predecir la posición del objeto para fechas específicas. Para evaluar la precisión del modelo, el módulo puede calcular métricas estándar de regresión, así como comparar el desempeño del modelo con y sin la componente física.


# Implementación

Con la clase Cuerpo.py mencionada en la metodología se instanciaron las características del objeto astronómico, posición inicial, velocidad inicial y masa, note que tanto el vector de posición como de velocidad acepta tanto de 2 o 3 coordenadas. Una vez instanciados los objetos tipo Cuerpo, la clase Simulacion_N_Cuerpos.py recibe una lista de ellos para los cuales calcula sus trayectorias aplicando el método de Runge Kutta de orden 4, esto lo hace con un tiempo de paso definido y recalculando su aceleración y posición con los métodos auxiliares programados en la misma clase. Con esto, el último método llamado simular genera un bucle con el tiempo de pasos definidos para crear un 'gif' con la simulación. En este apartado, es importante considerar que si se coloca un parámetro 'h' muy alto puede que en la simulación no se aprecie, o la aceleración y trayectorias no sean las esperadas. Esto se debe a que con un paso muy grande en el método de Runge Kutta el cálculo del nuevo punto por el que pasa el cuerpo será muy lejos del anterior punto demarcado, haciendo que el factor de la distancia entre cuerpos sea insignificante en el cálculo.

La clase Simulacion_2D.py propone un método que junto con los módulos mencionados en la metodología (matplotlib.pyplot y matplotlib.animate) es capaz de crear ejes dinámicos, que se ajustan según las posiciones iniciales de los cuerpos y una animación donde se aprecie el movimiento de los planetas. A su vez se tiene un método para guardar la animación como un gif.

La clase Simulacion_3D.py propone un método similar, solo que considerando un plano con 3 dimensiones, pero siguiendo la misma dinámica que Simulacion_2D.


\newpage

# Anexos

Repositorio de GitHub : <https://github.com/DebbieCon/simulacion_planetas_CA0305/blob/main/simulacion_planetas_CA0305.qmd>

![](figs/sim1/1.png){.center width="50%"} ![](figs/sim1/2.png){.center width="50%"} ![](figs/sim1/3.png){.center width="50%"} ![](figs/sim1/4.png){.center width="50%"}

**Figura 1:** Simulación 2D de un sistema conformado por una estrella quieta masiva, 2 planetas y un cometa.

![](figs/sim2/1.png){.center width="50%"} ![](figs/sim2/2.png){.center width="50%"} ![](figs/sim2/3.png){.center width="50%"} ![](figs/sim2/4.png){.center width="50%"}

**Figura 2:** Simulación 2D de un sistema conformado por el Sol, Tierra, Marte y un cuerpo intruso.

![](figs/sim3/1.png){.center width="50%"} ![](figs/sim3/2.png){.center width="50%"} ![](figs/sim3/3.png){.center width="50%"} ![](figs/sim3/4.png){.center width="50%"}

**Figura 3:** Simulación 3D de un sistema conformado por una estrella quieta, dos planetas y dos cometas.

# Referencias
